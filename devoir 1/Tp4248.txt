{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d8f17cc6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5572 entries, 0 to 5571\n",
      "Data columns (total 5 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   v1          5572 non-null   object\n",
      " 1   v2          5572 non-null   object\n",
      " 2   Unnamed: 2  50 non-null     object\n",
      " 3   Unnamed: 3  12 non-null     object\n",
      " 4   Unnamed: 4  6 non-null      object\n",
      "dtypes: object(5)\n",
      "memory usage: 217.8+ KB\n",
      "None\n",
      "     v1                                                 v2 Unnamed: 2  \\\n",
      "0   ham  Go until jurong point, crazy.. Available only ...        NaN   \n",
      "1   ham                      Ok lar... Joking wif u oni...        NaN   \n",
      "2  spam  Free entry in 2 a wkly comp to win FA Cup fina...        NaN   \n",
      "3   ham  U dun say so early hor... U c already then say...        NaN   \n",
      "4   ham  Nah I don't think he goes to usf, he lives aro...        NaN   \n",
      "\n",
      "  Unnamed: 3 Unnamed: 4  \n",
      "0        NaN        NaN  \n",
      "1        NaN        NaN  \n",
      "2        NaN        NaN  \n",
      "3        NaN        NaN  \n",
      "4        NaN        NaN  \n",
      "nombre de spam 747\n",
      "nombre de ham 4825\n"
     ]
    }
   ],
   "source": [
    "#importation du dataset spam.csv\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "data = pd.read_csv(\"spam.csv\", header = 0)\n",
    "\n",
    "#description du dataset\n",
    "print(data.info())\n",
    "print(data.head())\n",
    "\n",
    "#identification du nombre de spam et de ham\n",
    "countspam = 0\n",
    "countham = 0\n",
    "for i in data.index:\n",
    "    if data.iloc[i,0] == \"spam\":\n",
    "        countspam = countspam + 1\n",
    "    if data.iloc[i,0] == \"ham\":\n",
    "        countham = countham + 1\n",
    "print (\"nombre de spam\",countspam)\n",
    "print (\"nombre de ham\",countham)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cf68ca80",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4458, 5)\n",
      "(1114, 5)\n"
     ]
    }
   ],
   "source": [
    "#segmentation du jeu de données en jeu d'apprentissage et jeu de test\n",
    "data_random =data.sample(frac=1, random_state=1)#on randomise le jeu de données\n",
    "index_apprentissage =round(len(data_random) *0.8)# on veut avoir 80% des données pour l'ensemble d'apprentissage\n",
    "\n",
    "set_apprentissage = data_random[:index_apprentissage].reset_index(drop=True)\n",
    "set_test = data_random[index_apprentissage:].reset_index(drop=True)\n",
    "\n",
    "print(set_apprentissage.shape)\n",
    "print(set_test.shape)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "f02469da",
   "metadata": {},
   "source": [
    "    Maintenant nous allons faire du nettoyage de données, etant donné que sous sa forme actuelle nous ne pouvons pas appliquer la methode naïve de Bayes sur nos données, il faut donc les mettre dans un format aproprié. un mmessage est considéré comme un ensemble de mots \"Wi\", de ce fait l'on peut formaliser le fait de savoir si un message est un un spam ou pas , si étant donné une suite de mot Wi quel est la probabilité que cette suite de mots soit un spam?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6916ecd5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0                                convey my regards to him\n",
      "1                   _  anyway  many good evenings to u  s\n",
      "2       my sort code is  and acc no is   the bank is n...\n",
      "3                             sorry i din lock my keypad \n",
      "4       hi babe its chloe  how r u  i was smashed on s...\n",
      "                              ...                        \n",
      "4453    hey i will be late    i m at amk  need to drin...\n",
      "4454    babe  i fucking love you too    you know  fuck...\n",
      "4455                we have to pick rayan macleran there \n",
      "4456                   i will spoil you in bed as well   \n",
      "4457    hello  my love  how goes that day   i wish you...\n",
      "Name: v2, Length: 4458, dtype: object\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-5-f2f95fb18ec9>:2: FutureWarning: The default value of regex will change from True to False in a future version.\n",
      "  set_apprentissage['v2'] = set_apprentissage['v2'].str.replace('\\W', ' ') #suppression de la ponctuation\n"
     ]
    }
   ],
   "source": [
    "#commencons par supprimer la ponctuation et mettons tous les mots en minuscules (pour ne pas par exemple lors du comptage différencier le mot \"le\" du mot \"Le\")\n",
    "set_apprentissage['v2'] = set_apprentissage['v2'].str.replace('\\W', ' ') #suppression de la ponctuation\n",
    "set_apprentissage['v2'] = set_apprentissage['v2'].str.lower() #mots en minuscule\n",
    "print(set_apprentissage['v2'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "80527e39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0                          [convey, my, regards, to, him]\n",
      "1             [_, anyway, many, good, evenings, to, u, s]\n",
      "2       [my, sort, code, is, and, acc, no, is, the, ba...\n",
      "3                       [sorry, i, din, lock, my, keypad]\n",
      "4       [hi, babe, its, chloe, how, r, u, i, was, smas...\n",
      "                              ...                        \n",
      "4453    [hey, i, will, be, late, i, m, at, amk, need, ...\n",
      "4454    [babe, i, fucking, love, you, too, you, know, ...\n",
      "4455         [we, have, to, pick, rayan, macleran, there]\n",
      "4456             [i, will, spoil, you, in, bed, as, well]\n",
      "4457    [hello, my, love, how, goes, that, day, i, wis...\n",
      "Name: v2, Length: 4458, dtype: object\n",
      "nombre de mots  7719\n"
     ]
    }
   ],
   "source": [
    "set_apprentissage['v2'] = set_apprentissage['v2'].str.split() #on converti les messages de notre serie \"set_apprentissage\" en chaines de caractères séparés par des espaces \n",
    "print(set_apprentissage['v2'])\n",
    "vocabulaire = []  #vocabulaire va contenir tous les mots de notre dataset\n",
    "for message in set_apprentissage['v2']:\n",
    "    for mot in message:\n",
    "        vocabulaire.append(mot)\n",
    "vocabulaire = list(set(vocabulaire))\n",
    "print(\"nombre de mots \",len(vocabulaire))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f00776c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>boatin</th>\n",
       "      <th>18yrs</th>\n",
       "      <th>aren</th>\n",
       "      <th>held</th>\n",
       "      <th>janarige</th>\n",
       "      <th>role</th>\n",
       "      <th>terminated</th>\n",
       "      <th>bright</th>\n",
       "      <th>spl</th>\n",
       "      <th>increments</th>\n",
       "      <th>...</th>\n",
       "      <th>kid</th>\n",
       "      <th>robs</th>\n",
       "      <th>forgets</th>\n",
       "      <th>12hrs</th>\n",
       "      <th>cleared</th>\n",
       "      <th>bookedthe</th>\n",
       "      <th>xoxo</th>\n",
       "      <th>hide</th>\n",
       "      <th>ese</th>\n",
       "      <th>blowing</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 7719 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   boatin  18yrs  aren  held  janarige  role  terminated  bright  spl  \\\n",
       "0       0      0     0     0         0     0           0       0    0   \n",
       "1       0      0     0     0         0     0           0       0    0   \n",
       "2       0      0     0     0         0     0           0       0    0   \n",
       "3       0      0     0     0         0     0           0       0    0   \n",
       "4       0      0     0     0         0     0           0       0    0   \n",
       "\n",
       "   increments  ...  kid  robs  forgets  12hrs  cleared  bookedthe  xoxo  hide  \\\n",
       "0           0  ...    0     0        0      0        0          0     0     0   \n",
       "1           0  ...    0     0        0      0        0          0     0     0   \n",
       "2           0  ...    0     0        0      0        0          0     0     0   \n",
       "3           0  ...    0     0        0      0        0          0     0     0   \n",
       "4           0  ...    0     0        0      0        0          0     0     0   \n",
       "\n",
       "   ese  blowing  \n",
       "0    0        0  \n",
       "1    0        0  \n",
       "2    0        0  \n",
       "3    0        0  \n",
       "4    0        0  \n",
       "\n",
       "[5 rows x 7719 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "word_count_message = {unique_word : [0]*len(set_apprentissage['v2']) for unique_word in vocabulaire}# on crée un dictionnaire qui contient chaque mot contenu dns le vocabulaire\n",
    "\n",
    "for index,message in enumerate(set_apprentissage['v2']):  #on obtient a la fois l'index et le message à l'aide d'une boucle imbriquée\n",
    "    for mot in message:\n",
    "        word_count_message[mot][index] += 1\n",
    "\n",
    "word_counts = pd.DataFrame(word_count_message) #on transforme notre dictionnaire en dataframe\n",
    "word_counts.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "51423971",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>v1</th>\n",
       "      <th>v2</th>\n",
       "      <th>Unnamed: 2</th>\n",
       "      <th>Unnamed: 3</th>\n",
       "      <th>Unnamed: 4</th>\n",
       "      <th>boatin</th>\n",
       "      <th>18yrs</th>\n",
       "      <th>aren</th>\n",
       "      <th>held</th>\n",
       "      <th>janarige</th>\n",
       "      <th>...</th>\n",
       "      <th>kid</th>\n",
       "      <th>robs</th>\n",
       "      <th>forgets</th>\n",
       "      <th>12hrs</th>\n",
       "      <th>cleared</th>\n",
       "      <th>bookedthe</th>\n",
       "      <th>xoxo</th>\n",
       "      <th>hide</th>\n",
       "      <th>ese</th>\n",
       "      <th>blowing</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ham</td>\n",
       "      <td>[convey, my, regards, to, him]</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ham</td>\n",
       "      <td>[_, anyway, many, good, evenings, to, u, s]</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ham</td>\n",
       "      <td>[my, sort, code, is, and, acc, no, is, the, ba...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ham</td>\n",
       "      <td>[sorry, i, din, lock, my, keypad]</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>spam</td>\n",
       "      <td>[hi, babe, its, chloe, how, r, u, i, was, smas...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 7724 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     v1                                                 v2 Unnamed: 2  \\\n",
       "0   ham                     [convey, my, regards, to, him]          0   \n",
       "1   ham        [_, anyway, many, good, evenings, to, u, s]          0   \n",
       "2   ham  [my, sort, code, is, and, acc, no, is, the, ba...          0   \n",
       "3   ham                  [sorry, i, din, lock, my, keypad]          0   \n",
       "4  spam  [hi, babe, its, chloe, how, r, u, i, was, smas...          0   \n",
       "\n",
       "  Unnamed: 3 Unnamed: 4  boatin  18yrs  aren  held  janarige  ...  kid  robs  \\\n",
       "0          0          0       0      0     0     0         0  ...    0     0   \n",
       "1          0          0       0      0     0     0         0  ...    0     0   \n",
       "2          0          0       0      0     0     0         0  ...    0     0   \n",
       "3          0          0       0      0     0     0         0  ...    0     0   \n",
       "4          0          0       0      0     0     0         0  ...    0     0   \n",
       "\n",
       "   forgets  12hrs  cleared  bookedthe  xoxo  hide  ese  blowing  \n",
       "0        0      0        0          0     0     0    0        0  \n",
       "1        0      0        0          0     0     0    0        0  \n",
       "2        0      0        0          0     0     0    0        0  \n",
       "3        0      0        0          0     0     0    0        0  \n",
       "4        0      0        0          0     0     0    0        0  \n",
       "\n",
       "[5 rows x 7724 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set_apprentissage_nettoye = pd.concat([set_apprentissage, word_counts],axis=1) #dataframe néttoyé\n",
    "for i in set_apprentissage_nettoye.columns: #retirer les valeurs nan\n",
    "          set_apprentissage_nettoye[i] = set_apprentissage_nettoye[i].replace(np.nan,0)\n",
    "\n",
    "set_apprentissage_nettoye.head()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "b0e1f8bd",
   "metadata": {},
   "source": [
    "Nous avons appris que pour construire un modèle avec la méthode naïve de Bayes on se basait sur le calcul des probabilités apriori et postériori avec les formules du théorème de Bayes et de probabilité totale\n",
    "\n",
    "ici donc nous avons deux cas de figures p(ham|W1,...Wn) qui est la probabilité qu'un message soit un ham sachant la liste de mots qu'il contient et de même on a p(spam|W1,...Wn)\n",
    "\n",
    "pour construire donc notre modèle nous allons utiliser les formules suivantes:\n",
    "   \n",
    "   P(wi|ham) = N(wi|ham)+ alpha / N(ham) + alpha*N(vocabulaire)\n",
    "   \n",
    "   P(wi|spam) = N(wi|spam)+ alpha / N(spam) + alpha*N(vocabulaire)\n",
    "   qui sont nos probabilités postériori\n",
    "   \n",
    "  P(spam), P(ham), N(spam), N(ham) qui sont nos probabailite apriori\n",
    "   Avec :\n",
    "   P(spam): la probabilié de messages étant classés comme spam\n",
    "   P(ham) : le probabilité de messages étant classés comme ham\n",
    "   N(spam) : le nombre de mots dans tous les messages spam\n",
    "   N(ham) : le nombre de mots dans tous les messages ham\n",
    "   N(vocabulaire) : le nombre de mots dans notre vocabulaire\n",
    "   \n",
    "  nous utiliserons également le lissage de laplace et l'ensemble alpha = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "78959317",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "probabilté de spam  0.13593539703903096\n",
      "probabilté de ham  0.8640646029609691\n"
     ]
    }
   ],
   "source": [
    "# on separe les messages spam des ham\n",
    "spam_messages = set_apprentissage_nettoye[set_apprentissage_nettoye['v1'] == 'spam']\n",
    "ham_messages = set_apprentissage_nettoye[set_apprentissage_nettoye['v1'] == 'ham']\n",
    "\n",
    "# calcul de P(ham)et P(spam)\n",
    "p_spam = len(spam_messages) / len(set_apprentissage_nettoye)\n",
    "p_ham = len(ham_messages) / len(set_apprentissage_nettoye)\n",
    "print(\"probabilté de spam \",p_spam)\n",
    "print(\"probabilté de ham \",p_ham)\n",
    "\n",
    "# calcul de N(spam)\n",
    "n_mots_spam_message = spam_messages['v2'].apply(len)\n",
    "n_spam = n_mots_spam_message.sum()\n",
    "\n",
    "# calcul de N(ham)\n",
    "n_mots_ham_message = ham_messages['v2'].apply(len)\n",
    "n_ham = n_mots_ham_message.sum()\n",
    "\n",
    "# calcul de N(vocabulaire)\n",
    "n_vocabulaire = len(vocabulaire)\n",
    "\n",
    "#lissage de laplace\n",
    "alpha = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "3572259f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calcul des probabiltés postériori\n",
    "paramater_spam = {unique_word:0 for unique_word in vocabulaire}\n",
    "paramater_ham = {unique_word:0 for unique_word in vocabulaire}\n",
    "\n",
    "for mot in vocabulaire:\n",
    "    n_give_spam = spam_messages[mot].sum()\n",
    "    p_give_spam = (n_give_spam +alpha) /(n_spam + alpha*n_vocabulaire )\n",
    "    paramater_spam[mot] = p_give_spam \n",
    "    \n",
    "    n_give_ham = ham_messages[mot].sum()\n",
    "    p_give_ham = (n_give_ham +alpha) /(n_ham + alpha*n_vocabulaire )\n",
    "    paramater_ham[mot] = p_give_ham "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "8b0be12f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Classification de l'ensemble de test\n",
    "import re #librairie permettant d'utiliser les expressions rationnelles ou régulières\n",
    "\n",
    "def classeur_set_test(message):\n",
    "    '''\n",
    "    message : une chaîne\n",
    "    '''\n",
    "    message = re.sub('\\W', ' ', message)\n",
    "    message = message.lower().split()\n",
    "    \n",
    "    p_spam_given_message = p_spam\n",
    "    p_ham_given_message = p_ham\n",
    "    \n",
    "    for mot in message:\n",
    "        if mot in paramater_spam:\n",
    "            p_spam_given_message *= paramater_spam[mot]\n",
    "            \n",
    "        if mot in paramater_ham:\n",
    "            p_ham_given_message *= paramater_ham[mot]\n",
    "    \n",
    "    if p_ham_given_message > p_spam_given_message :\n",
    "        return 'ham'\n",
    "    elif p_spam_given_message > p_ham_given_message :\n",
    "        return 'spam'\n",
    "    else:\n",
    "        return 'besoin dexpertise humaine'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "5067063f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0        ham\n",
      "1       spam\n",
      "2        ham\n",
      "3        ham\n",
      "4        ham\n",
      "        ... \n",
      "1109     ham\n",
      "1110     ham\n",
      "1111     ham\n",
      "1112     ham\n",
      "1113     ham\n",
      "Name: predicted, Length: 1114, dtype: object\n"
     ]
    }
   ],
   "source": [
    "#verification de la classification\n",
    "set_test['predicted'] = set_test['v2'].apply(classeur_set_test)\n",
    "set_test.head()\n",
    "print(set_test['predicted'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a72eac79",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "correctement predit: 1107\n",
      "prediction incorrect: 7\n",
      "Accuracy: 0.9937163375224417\n"
     ]
    }
   ],
   "source": [
    "correct = 0\n",
    "total = set_test.shape[0]\n",
    "for row in set_test.iterrows():\n",
    "    row = row[1]\n",
    "    if row['v1'] == row['predicted']:\n",
    "        correct += 1\n",
    "print('correctement predit:', correct)\n",
    "print('prediction incorrect:', total - correct)\n",
    "print('Accuracy:', correct/total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "00043aa5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
